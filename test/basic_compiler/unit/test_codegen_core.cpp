// (c) 2025 Sam Caldwell. All Rights Reserved.

#include <gtest/gtest.h>
#include <string>
#include "basic_compiler/Compiler.h"

using namespace gwbasic;
/*
 * Test Suite: CodeGen Core
 * Purpose: Validate baseline LLVM IR emission: module header/decls, main
 *          prologue/epilogue, and basic expression lowering for assign,
 *          arithmetic, unary, comparisons, and PRINT (num/str).
 * Components Under Test: Compiler facade; CodeGenerator emitHeader,
 *          emitGlobals, emitMainPrologue/Epilogue, emitExpr, emitLineBlock.
 * Expected Behavior: IR contains declarations for printf/scanf, entry allocas
 *          and zero-inits for variables, correct fadd/fsub/fmul/fdiv,
 *          fcmp+uitofp for comparisons, and printf calls for numbers/strings.
 */
TEST(CodeGenCore, EmptyProgramHeaderAndExit) {
    std::string ir = Compiler::compileString("");
    EXPECT_NE(ir.find(";; Generated by gwbasic::CodeGenerator"), std::string::npos);
    EXPECT_NE(ir.find("declare i32 @printf"), std::string::npos);
    EXPECT_NE(ir.find("declare i32 @scanf"), std::string::npos);
    EXPECT_NE(ir.find("define i32 @main()"), std::string::npos);
    EXPECT_NE(ir.find("  ret i32 0\n}\n"), std::string::npos);
}

// Single-test-per-file policy: additional cases moved to dedicated files.
